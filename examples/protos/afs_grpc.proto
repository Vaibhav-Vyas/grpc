// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: 
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

option java_package = "io.grpc.examples";
option objc_class_prefix = "HLW";

package afs_grpc;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}

  //****************************************************************************
  // AFS File system API.
  // Implementing AFS prototype in usermode using FUSE.
  //****************************************************************************
  
  //
  // AFS: AfsTestAuth: Pass path and timestamp to know 
  // if the path passed was the latest time or not.
  //
  // return 0 if client cache is the latest copy; 
  // return other values (error codes) if client cache is outdated.
  //
  rpc AfsTestAuth (FileInodeParams) returns (ReturnCode) {}
  
  //
  // AFS: AfsStore: 
  // A client-to-server streaming RPC.
  // Accepts a stream of large packets to be written to a specified file.
  // Pass path and contents to be written to file on server.
  //
  // return 0 if operation is successful; 
  // else returns relevant error codes.
  //
  rpc AfsStore(stream FileRWParams) returns (ReturnCode) {}
  
  //
  // AFS: AfsFetch: 
  // A server-to-client streaming RPC.
  // Pass path and file write contents to server.
  //
  // return 0 if operation is successful; 
  // else returns relevant error codes.
  //
  rpc AfsFetch(FileInodeParams) returns (stream FileRWParams) {}
  
  
  
  
  //****************************************************************************
  // Benchmark RPC latency for different data types.
  //****************************************************************************

  // Pass integer to measure its marshalling cost.
  rpc SayHelloInt (HelloRequestInt) returns (HelloReply) {}

  // Pass double to measure its marshalling cost.
  rpc SayHelloDouble (HelloRequestDouble) returns (HelloReply) {}

  // Pass integer to measure its marshalling cost.
  rpc SayHelloComplex (HelloRequestComplex) returns (HelloReply) {}


  // A client-to-server streaming RPC.
  //
  // Accepts a stream of large packets, returning the 
  // Summary of count of large packets.
  rpc RecordRoute(stream HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  /*required*/ string name = 1;
}

// The request message containing the user's name.
message HelloRequestInt {
  /*required*/ int32 empid = 1;
}

// The request message containing the user's name.
message HelloRequestDouble {
  /*required*/ double salary = 1;
}

// The request message containing the user's name.
message HelloRequestComplex {
  /*required*/ int32 empid = 1;
  /*required*/ string name = 2;
  /*required*/ double salary = 3;
  /*required*/ HelloRequestComplex objhrc = 4;
}

// The response message containing the greetings
message HelloReply {
  /*required*/ string message = 1;
}

// The response message containing the greetings
message ReturnCode {
  /*required*/ string message = 1;
  /*required*/ int32 errorCode = 2;
}

// Creating RPC Data type for String.
message RpcStringObj {
  /*required*/ string message = 1;
}

// Creating RPC Data type for Int.
message RpcInt32Obj {
  /*required*/ int32 data = 1;
}

// Creating RPC Data type for Double.
message RpcDoubleObj {
  /*required*/ double data = 1;
}

//
// AFS: TestAuth: Pass path and timestamp to know 
// if the path passed was the latest time or not.
//
message FileInodeParams {
  /*required*/ string path = 1;
  /*required*/ int32 timestamp = 2;
}

//
// AFS: FileRWParams: File read / write contents.
//
message FileRWParams {
  /*required*/ string path = 1;
  /*required*/ string data = 2;
}


